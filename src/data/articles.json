[
  {
    "type_of": "article",
    "id": 359194,
    "title": "Do JavaScript ao Python",
    "description": "Percepções de transicionar do JavaScript para o Python",
    "published": true,
    "published_at": "2020-06-19T20:54:51.340Z",
    "slug": "do-javascript-ao-python-m5m",
    "path": "/arielbarcellos/do-javascript-ao-python-m5m",
    "url": "https://dev.to/arielbarcellos/do-javascript-ao-python-m5m",
    "comments_count": 0,
    "public_reactions_count": 1,
    "page_views_count": 38,
    "published_timestamp": "2020-06-19T20:54:51Z",
    "body_markdown": "## Percepções de transicionar do JavaScript para o Python\n\nNesse artigo, eu vou contar quais foram as minhas percepções ao aprender Python em comparação com JavaScript, com a qual eu já programava.\n\nÉ claro que toda linguagem tem suas vantagens e desvantagens para determinado cenário, sendo assim, não vou especificar nenhum caso de uso, apenas as funcionalidades nativas da linguagem, que são comumente usadas em tutoriais/cursos.\n\nPara aprender uma linguagem ou framework, eu costumava usar um curso ou tutorial prático e só quando já estava usando a ferramenta buscava material mais conceitual. Com o Python, eu fiz diferente, comecei a aprender primeiro com o livro (Python Programming For Begginers), que me forneceu uma base conceitual da linguagem.\n\nEu acho que essa abordagem é legal pra quem já tem outras linguagens na bagagem, porque você consegue visualizar o conceito aplicado. Pra quem está começando do zero, acho que nada melhor que pôr a mão na massa (saber fazer antes de saber porquê).\n\nVamos para o que interessa, quais foram as minhas percepções de Python e porque eu acho que você deveria aprende-la:\n\n### 1. Teoria dos conjuntos (Sets):\n\nApesar do JavaScript ter uma classe nativa Set, é claro que a teoria dos conjuntos não foi uma preocupação, como é evidente em Python. As operações entre conjuntos são muito mais fáceis e intuitivas em Python.\n\nPra quem não está por dentro da utilidade de se utilizar teoria dos conjuntos no desenvolvimento, a classe set (conjunto) é uma coleção não-ordenada de elementos únicos. Exemplo:\n\n```python\nfoo = [1, 2, 2, 3, 4, 5, 5] # Lista com objetos repetidos\n\n# Para ter um set apenas com elementos únicos fazemos\nfoo_set = set(foo) # { 1, 2, 3, 4, 5 }\n```\n\nEm JavaScript:\n\n```javascript\nconst foo = [1, 2, 2, 3, 4, 5, 5]\n\nconst foo_set = new Set(foo) // Set(5) { 1, 2, 3, 4, 5 }\n```\n\nAté aí, beleza, tudo muito parecido.\n\nMas a teoria dos conjuntos vai além disso. Digamos que eu tenho um conjunto `A = { 1, 2, 3, 4 }` e um conjunto `B = { 3, 4, 5, 6 }` e queremos chegar em um terceiro conjunto que pode ser a UNIÃO (todos os elementos de A e todos os elementos de B), INTERSECÇÃO (todos os elementos de A que também estão em B) ou DIFERENÇA (todos os elementos de A que não estão em B), em Python isso é tão simples quanto:\n\n```python\nA = { 1, 2, 3, 4 }\nB = { 3, 4, 5, 6 }\n\nU = A.union(B) # União de A e B: { 1, 2, 3, 4, 5, 6 }\nI = A.intersection(B) # Intersecção de A e B: { 3, 4 }\nDA = A.difference(B) # Diferença de A em relação a B: { 1, 2 }\nDB = B.difference(A) # Diferença de B em relação a A: { 5, 6 }\n```\n\nIncrivelmente fácil e intuitivo. Já em JavaScript, não há método nativo, você teria que implementar os métodos. Nada muito complexo de fazer, mas ponto Python definitivamente.\n\nE se você não lembrou de alguma situação onde conjuntos fariam todo sentido em seu código, guarde bem essa informação, porque vai ser útil um dia, assim como o próximo assunto.\n\n### 2. Aritmética Modular\n\nAritmética modular mudou o jogo pra mim. Realmente, eu vi isso em um livro sobre a história da criptografia e me surpreendeu como não ensinam isso da forma correta.\n\nPara entender o que é a aritmética modular basta pensar em relógio de parede. Um relógio de parede tem 12 posições e sempre que chega ao final, volta ao início. Ou seja, um relógio de parede está em módulo 12. Onde o número 12 também é o número 0.\n\nImagine então que o ponteiro está na posição 0 (12), se andarmos 3 posições estaremos na posição 3. Se andarmos com o ponteiro 15 posições estaremos também na posição 3. Ou seja, 3 e 15 em módulo 12 é equivalente a 3. Isso coincide com o resto da divisão: `3 RESTO 12 = 3` e `15 RESTO 12 = 3`.\n\nPorém, a diferença entre módulo e resto fica clara quando fazemos operações com números negativos. De volta ao ponteiro do relógio, imagine que estamos na posição das 12 horas (posição 0), e agora andamos com o ponteiro 3 posições em sentido anti-horário. Chegaremos a posição 9 do relógio. Ou seja, se andarmos com o relógio -3 (menos três) posições, chegaremos ao 9, isso é dizer que `-3 MÓDULO 12 é equivalente a 9`.\n\nE é nessa parte que o JavaScript decepciona, o JavaScript trata a operação de módulo como resto. Podemos ver isso ao fazer uma operação de módulo com números negativos:\n```javascript\n3 % 12 // Output: 3\n15 % 12 // Output: 3\n-3 % 12 // Output: -3\n```\n\nEm Python:\n```python\n3 % 12 # Output: 3\n15 % 12 # Output: 3\n-3 % 12 # Output: 9\n```\n\nVocê pode chegar ao mesmo resultado em JavaScript com a seguinte operação:\n```javascript\n(12 + 3) % 12 // Output: 3\n(12 + (-3)) % 12  // Output: 9\n```\n\nOu seja, mais uma vez, por praticidade, ponto Python.\n\nE se você quer alguns exemplos de onde isso é útil, além de ser a base da criptografia e criptoanálise, pense nas vezes que você precisou converter o estilo de horas (24/12 horas), um carrossel de informações em loop. Pensa no jogo da cobrinha (Snake), que ao chegar ao final da tela a cobra aparece no início do lado oposto.\n\nDe verdade, depois que você pega o jeito, começa a ver aritmética modular em todo lugar. Inclusive em grupos de WhatsApp quando mandam aquelas coisas que esse ano tem tal coisa que só acontece uma vez em cada _x_ anos.\n\n### 3. As pequenas coisas. Não há nada maior, certo? (Vanilla Sky)\n\nPor último, vem a praticidade de não ter que declarar `const`, `let` ou `var`. Não precisar de parênteses para uma condicional ou loop (`if`, `while`, `for`). Controlar o escopo com indentação, ao invés de precisar de chaves.\n\nTodas essas pequenas coisas que não parecem nada, mas faz com que quando você se acostuma com Python, programar em JavaScript fica um pouco desconfortável.\n\nMais ou menos como quando você está acostumado com um carro onde a marcha passa super suave e depois pega um outro carro que tem que ter as manhas, pisar mais na embreagem, tem sempre aquela marcha que precisa dar um soquinho pra entrar.\n\nEspero me sair bem com essa analogia. Haha.\n\nBom, essas foram as minhas percepções. E você, o que acha? Deixa aí nos comentários! Não esquece de me seguir no twitter: [@arielbarcellos](https://twitter.com/arielbarcellos).",
    "positive_reactions_count": 1,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--jc0FMyzi--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e16m5tmap2u24pjdi4qe.png",
    "tag_list": ["javascript", "python", "programming", "português"],
    "canonical_url": "https://dev.to/arielbarcellos/do-javascript-ao-python-m5m",
    "user": {
      "name": "Ariel Barcellos",
      "username": "arielbarcellos",
      "twitter_username": "arielbarcellos",
      "github_username": "naijopkr",
      "website_url": "https://arielbarcellos.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--AeUg7IEB--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/3d692cce-1645-49d3-a376-7d3c4dccc7c7.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--q-4hzh2p--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/3d692cce-1645-49d3-a376-7d3c4dccc7c7.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 345081,
    "title": "Cultura open source, liberdade e software livre",
    "description": "Reflexão sobre impactos de licenças restritivas na cultura open source.",
    "published": true,
    "published_at": "2020-05-29T19:33:41.345Z",
    "slug": "cultura-open-source-liberdade-e-software-livre-4k7o",
    "path": "/arielbarcellos/cultura-open-source-liberdade-e-software-livre-4k7o",
    "url": "https://dev.to/arielbarcellos/cultura-open-source-liberdade-e-software-livre-4k7o",
    "comments_count": 0,
    "public_reactions_count": 1,
    "page_views_count": 16,
    "published_timestamp": "2020-05-29T19:33:41Z",
    "body_markdown": "## Introdução\n\nAntes de qualquer coisa, vamos tirar a ambiguidade existente no termo free software. Free software pode significar software livre e software gratuito. Nesse caso estamos falando de software livre.\n\nTanto software livre, como software de código aberto podem ou não cobrar na distribuição de cópias. Conforme consta do site [gnu.org](https://www.gnu.org/philosophy/selling.pt-br.html) e [opensource.org](https://opensource.org/faq#commercial).\n\nTodo software livre, bem como de código aberto, deve dar a liberdade ao usuário para acessar, executar, modificar e redistribuir seu código fonte. E, na maioria dosfalse casos podemos usar software livre e de código aberto como sinônimos.\n\nRealmente, o site [opensource.org](https://opensource.org/faq#free-software) coloca os dois como dois termos para a mesma coisa, porém na prática podemos ter um software de código aberto que não se trata de um software livre.\n\nIsso porque, no caso do software livre, todo material feito a partir desse código não pode restringir essa licença. Por exemplo, eu posso acessar o repositório do código fonte do Linux, copiar, modificar e redistribuir o meu código modificado, porém as modificações não podem restringir a licença livre.\n\nPor outro lado, um software de código aberto diz apenas respeito ao estado do seu código, que deve estar disponível ao usuário. Não, necessariamente, restringindo seu uso apenas para outros sofwares de código aberto.\n\nPodemos ver bem como isso funciona comparando Linux e FreeBSD.\n\n## Linux VS FreeBSD\n\nO Linux é distribuido sob a licença GNU/GPL (software livre), ou seja, não posso usar o código do Linux para fazer um sistema operacional de código fechado (proprietário).\n\nTambém não posso distribuir o código Linux com softwares cujas licenças restrinjam a liberdade de acessar, modificar, copiar e redistribuir. Softwares proprietário são o caso, pois restringem de usuário acessar e modificar o código fonte.\n\nO FreeBSD é um sistema operacional de código aberto, já que você pode acessar, copiar, modificar e redistribuir seu código. Mas, diferente do Linux, você pode usar o código do FreeBSD para fazer o seu próprio sistema operacional e não deixar o código aberto, como é o caso do Mac OS X, que usa muitos componentes do FreeBSD.\n\nCom isso concluimos que para ser software livre tem que ser de código aberto, mas para ser de código aberto, não precisa ser livre.\n\nOutro jeito para lembrar é:\n\n- Códigos derivados de software livre sempre serão software livre.\n- Códigos derivados de software de código aberto, podem não ser software de código aberto.\n\n## Se um software é livre, como pode restringir o seu uso?\n\nBom, o fato de ser um software livre diz respeito apenas que ele atende às condições colocadas pela _Free Software Foundation_, e tem em seu uso um contrato de licença de uso que é aceito voluntariamente pelo usuário. Do mesmo jeito que o Windows tem um outro tipo de licença.\n\nOu seja, na prática o software livre pode ter um contrato de licença mais permissivo que o Windows, porém, ainda possui restrições.\n\nOutra coisa que podemos pensar é na competência das partes do contrato em fazer valer suas cláusulas. A licença do Windows não permite cópia e distribuição do sistema para terceiros, porém o Windows é distribuido sem autorização, independente dessa restrição.\n\nDa mesma maneira, se uma pessoa usa uma biblioteca javascript que está sob licença GNU GPL em um projeto que será distribuido e, que não terá seu código disponível para acesso, cópia e modificação, está infringindo o contrato.\n\nOu seja, provavelmente existem muitas aplicações por aí que usam código de software livre, porém não são software livre. É claro que, em alguns casos, isso leva a um processo judicial, pricipalmente quando envolvem grandes empresas. Do mesmo jeito que acontece com a utilização de Windows pirata, como no caso em que a [Microsoft acusou Embraer de usar software pirata](https://tecnoblog.net/129416/microsoft-embraer-software-pirata/).\n\n## Código aberto como cultura de desenvolvimento\n\nNo fim, essas licenças que restringem o uso do código acabam só por dificultar o progresso da cultura de código aberto, uma vez que a vantagem do Open Source não está em dizer como ou não seu código será utilizado por outros, mas, sim, por ter toda uma rede trabalhando de forma descentralizada em resolver um mesmo problema.\n\nE se a Canonical quiser distribuir o Ubuntu com softwares proprietários instalados por padrão? A ideia é que a cultura de código aberto é melhor e mais eficiente que a forma centralizada de desenvolvimento de software proprietário.\n\nSe realmente acreditamos nisso, porque temer que peguem um trabalho descentralizado e o centralizem? Pela lógica, eles estão apenas piorando um produto. Desde que isso não proiba de qualquer forma que o trabalho descentralizado siga o seu caminho.\n\n## Conclusão\n\nA cultura open source já se provou mais eficiente que a cultura de desenvolvimento centralizado, não devíamos ter medo de como vão usar o código, simplesmente porque não temos esse poder. Se uma pessoa quiser usar um código meu para algo que eu considero maléfico, eu não tenho como fazer nada. Da mesma forma, um fabricante de corda não tem como controlar um usuário dessa corda de se enforcar com ela. Ele pode até colocar nos termos de compra e uso da corda.\n\nVocê pode até querer que seu código seja apenas utilizado de uma forma ou outra, mas na realidade o único jeito de você evitar isso é não publicar o código, mas, de novo, só estará piorando o produto.\n\nEspero que você tenha gostado desse artigo e se quiser estar sempre ligado em novas publicações me segue no Twitter: [@arielbarcellos](https://twitter.com/arielbarcellos).",
    "positive_reactions_count": 1,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--aPTAQ4YS--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/w21tyxzkbm2dj8j3xxqv.png",
    "tag_list": ["linux", "copyright", "copyleft", "português"],
    "canonical_url": "https://dev.to/arielbarcellos/cultura-open-source-liberdade-e-software-livre-4k7o",
    "user": {
      "name": "Ariel Barcellos",
      "username": "arielbarcellos",
      "twitter_username": "arielbarcellos",
      "github_username": "naijopkr",
      "website_url": "https://arielbarcellos.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--qldTNcmA--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--hD1vc0MP--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 330467,
    "title": "As ameaças à criptografia ponta-a-ponta (end-to-end encryption)",
    "description": "O que pode ameaçar nossa privacidade mesmo com criptogracia ponta-a-ponta?",
    "published": true,
    "published_at": "2020-05-08T14:57:55.392Z",
    "slug": "as-ameacas-a-criptografia-ponta-a-ponta-end-to-end-encryption-h25",
    "path": "/arielbarcellos/as-ameacas-a-criptografia-ponta-a-ponta-end-to-end-encryption-h25",
    "url": "https://dev.to/arielbarcellos/as-ameacas-a-criptografia-ponta-a-ponta-end-to-end-encryption-h25",
    "comments_count": 0,
    "public_reactions_count": 0,
    "page_views_count": 0,
    "published_timestamp": "2020-05-08T14:57:55Z",
    "body_markdown": "Não faz tanto tempo que o WhatsApp começou a utilizar criptografia ponta-a-ponta em suas mensagens e Mark Zuckerberg anunciou esse ano que o Facebook iria usar criptografia ponta-a-ponta em suas 3 plataformas de troca de mensagens. Isso é ótimo, certo? Garantir que sua mensagem só será lida por você e por quem você deseja que a leia. Porém, algumas pessoas não estão felizes com isso. Por que será?\n\nPara começar, o que é criptografia ponta-a-ponta? De maneira bem simples, esse tipo de criptografia quer dizer que a mensagem sai do celular remetente criptografada e só será descriptografada no celular da outra pessoa através de uma troca de chaves que só os dispositivos dos usuários terão. Nem a empresa desenvolvedora do aplicativo teria acesso à mensagem.\n\nDiferente de outros mecanismos de criptografia onde a mensagem é criptografada no seu celular, descriptografada no servidor de mensagens, que criptografa novamente a mensagem e envia ao destinatário, podendo no caminho armazenar em bancos de dados a mensagem. Veja que, nesse caso, se o servidor de mensagens for comprometido, outras pessoas podem ter acesso às suas mensagens.\n\nNesse sentido, a criptografia ponta-a-ponta é um ótimo recurso para garantir a confidencialidade da mensagem, porém alguns mecanismos podem comprometer a privacidade dos usuários. Veja abaixo três exemplos:\n\n1. Escaneamento no cliente (client-side scanning)\n\n    No escaneamento no cliente, o aplicativo é configurado para escanear o conteúdo da sua mensagem e confrontar o conteúdo com um banco de dados. Caso exista em sua mensagem alguma coisa considerada problemática, o aplicativo pode negar o envio de tal mensagem ou até mesmo enviar a mensagem para terceiros sem o seu conhecimento.\n\n    Apesar desse mecanismo poder ser usado para causas realmente importantes, como prevenir a dissipação de conteúdo de exploração infantil, ele também pode ser usado para perseguir indivíduos pacíficos em países onde seja crime, por exemplo, criticar o governo ou ser homossexual.\n\n2. Fantasmas em suas conversas\n\n    Apesar de suas mensagens serem criptografadas e só quem está na conversa tem a chave para descriptografar a mensagem, o aplicativo pode esconder participantes fantasmas que receberão também as mensagens sem você saber. Esse caso é igual aos “grampos” que empresas telefônicas realizam através de mandados judiciais.\n\n    Muitas pessoas até acham esse mecanismo legal desde que seja utilizado apenas pelos agentes do Estado para ajudar em investigações. Se você confia no governo e seus agentes, provavelmente é o seu caso. Porém, uma brecha de segurança é uma brecha de segurança e a invasão que pode ser usada para o bem hoje, pode ser usada para perseguição e opressão amanhã.\n\n3. Backups não criptografados\n\n    Muitas pessoas já estão expostas a esse risco. Aplicativos de mensagem frequentemente dão a opção de backup de mensagens aos usuários, porém se tal backup não está criptografado, suas mensagens estão expostas. Seja caso se comprometa sua conta Google ou o servidor onde as mensagens estão armazenadas, suas mensagens estarão visíveis.\n\n    O melhor é não fazer backup de mensagens, mas se for estritamente necessário, certifique-se de que seu backup esteja criptografado e coloque uma senha segura para descriptografá-lo.\n\n#### Conclusão\n\nCom o andar da carruagem é bem provável que nos próximos anos a maioria dos aplicativos de mensagens conhecidos hoje estarão expondo seus usuários a brechas de segurança. Mas, não nos desesperemos, soluções de código aberto e que utilizem criptografia de ponta-a-ponta junto com comunicação peer-to-peer (P2P — as mensagens não passam por um servidor e vão direto ao outro usuário) já existem e serão utilizadas cada vez mais.\n\n##### Leia mais:\n\n- [Wikipedia - Criptografia ponta-a-ponta](https://pt.wikipedia.org/wiki/Criptografia_de_ponta-a-ponta)\n- [EFF - Don't let encrypted messaging become hollow promise](https://www.eff.org/deeplinks/2019/07/dont-let-encrypted-messaging-become-hollow-promise)\n\n",
    "positive_reactions_count": 0,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--FsigyT0H--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/wiz9tm7vnv5ocbq00coa.jpeg",
    "tag_list": ["cybersecurity", "criptografia", "encryption", "privacy"],
    "canonical_url": "https://dev.to/arielbarcellos/as-ameacas-a-criptografia-ponta-a-ponta-end-to-end-encryption-h25",
    "user": {
      "name": "Ariel Barcellos",
      "username": "arielbarcellos",
      "twitter_username": "arielbarcellos",
      "github_username": "naijopkr",
      "website_url": "https://arielbarcellos.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--qldTNcmA--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--hD1vc0MP--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 328985,
    "title": "Seja mais produtivo com Linux #2",
    "description": "Histórico de comandos (“history”, “!” e “CTRL + R”)",
    "published": true,
    "published_at": "2020-05-06T16:35:50.866Z",
    "slug": "seja-mais-produtivo-com-linux-2-2obi",
    "path": "/arielbarcellos/seja-mais-produtivo-com-linux-2-2obi",
    "url": "https://dev.to/arielbarcellos/seja-mais-produtivo-com-linux-2-2obi",
    "comments_count": 0,
    "public_reactions_count": 2,
    "page_views_count": 15,
    "published_timestamp": "2020-05-06T16:35:50Z",
    "body_markdown": "Como consultar e usar o histórico de comandos usados no terminal com `history`, `!` e `CTRL + R`.\n\nTrês comandos que me ajudam muito no dia a dia desde que os aprendi são os comandos: `history`, `!` (_ponto de exclamação_) e `CTRL + R`.\n\n## History\n\nO comando `history` mostra os comandos utilizados no pelo usuário até o limite especificado no arquivo `~/.bashrc`:\n\n```\nHISTSIZE=1000\nHISTFILESIZE=2000\n```\n\nEsse comando é legal pois ele permite que você filtre, utilizando o `grep`, os comandos que você usou com determinado padrão. Por exemplo:\n\n```\n$ history | grep npm\n1953 npm install\n1955 npm run dev\n1956 npm start\n```\n\nOu seja, ele mostra todos os registros do histórico do comando `npm`.\n\n## Ponto de Exclamção (!)\n\nO segundo comando `!` serve para executar o último comando com determinada aplicação. No caso acima, vamos que a última entrada com o comando `npm` é `npm start`, logo se usarmos `!npm` teremos:\n\n```\n$ !npm\nnpm start\n```\n\nSe for dado o comando com duas exclamações `!!`, será executado o último comando (_esse comando é equivalente a apertar a tecla para cima seguido de enter_).\n\n## CTRL + R\n\nO comando `CTRL + R` permite procurar por palavras chaves no seu histórico de comandos utilizados e retorna o último comando com aquela palavra-chave.\n\nPor exemplo, vamos dizer que você utilizou vários comandos com a aplicação `npm`, sendo que o último comando foi `npm install --save axios`, e você quer utilizar o comando `npm run dev`. Você não pode usar o comando `!npm` pois esse irá executar o último comando com `npm`.\n\nCom o `CTRL + R` você pode buscar o último comando com a palavra chave `dev` e ele te retornará último comando que contenha essa palavra, conforme abaixo, depois de ativar o atalho com `CTRL + R`:\n\n```\n(reverse-i-search)`': ~> assim irá aparecer ao ativar o atalho\n(reverse-i-search)`dev': npm run dev\n```\n\nObs.: Note que utilizando este comando, ele encontrar qualquer comando que tenha a sequência ‘dev’. Ou seja, se houver outro comando mais recente com a palavra dev, esse será o comando mostrado.\n\n## Conclusão\n\nCom esses três comandos você não precisará mais ficar apertando para cima e para baixo até encontrar o comando que está procurando. Você perceberá muito rápido como esses comandos facilitam seu dia a dia com Linux.",
    "positive_reactions_count": 2,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--h8K_4RHw--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e77xk06x2waszq32b9s5.png",
    "tag_list": ["linux", "produtividade", "terminal", "bash"],
    "canonical_url": "https://dev.to/arielbarcellos/seja-mais-produtivo-com-linux-2-2obi",
    "user": {
      "name": "Ariel Barcellos",
      "username": "arielbarcellos",
      "twitter_username": "arielbarcellos",
      "github_username": "naijopkr",
      "website_url": "https://arielbarcellos.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--qldTNcmA--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--hD1vc0MP--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg"
    }
  },
  {
    "type_of": "article",
    "id": 328357,
    "title": "Seja mais produtivo com Linux #1",
    "description": "pushd, popd e dirs   Esses três comandos servem para facilitar a sua navegação entre diretór...",
    "published": true,
    "published_at": "2020-05-05T19:01:57.918Z",
    "slug": "seja-mais-produtivo-com-linux-1-2c18",
    "path": "/arielbarcellos/seja-mais-produtivo-com-linux-1-2c18",
    "url": "https://dev.to/arielbarcellos/seja-mais-produtivo-com-linux-1-2c18",
    "comments_count": 1,
    "public_reactions_count": 4,
    "page_views_count": 11,
    "published_timestamp": "2020-05-05T19:01:57Z",
    "body_markdown": "## `pushd`, `popd` e `dirs`\n\nEsses três comandos servem para facilitar a sua navegação entre diretórios. Normalmente, usamos o comando `cd [caminho_do_diretorio]`, porém com os comandos `pushd`, `popd` e `dirs` podem agilizar e muito a navegação entre diretórios, pois cria um registro dos diretórios em forma de uma pilha _(stack)_.\n\nBasicamente, os comandos funcionam da seguinte maneira: o comando `pushd` adiciona um diretório à pilha de diretórios. O comando `popd` remove o último diretório adicionado da pilha de diretórios, navegando até o diretório que estava posterior na pilha. Por último, o comando `dirs` mostra todos os diretórios na pilha.\n\n## Exemplo\n\n1. Navegue até o diretório `/tmp` e crie alguns diretórios para o exemplo:\n    ```bash\n    $ cd /tmp\n\n    $ mkdir diretorio{0,1,2,3,4} ~> esse comando criará 5 diretórios\n    ```\n\n2. Veja quais diretórios estão na pilha usando o comandodirs e depois navegue até o `diretorio0` com o comando `pushd diretorio0`:\n    ```bash\n    $ dirs\n    output: /tmp\n    \n    $ pushd diretorio0\n    output: /tmp/diretorio0 /tmp\n    ```\n\n    > Note que toda vez que você adiciona ou remove um diretório da pilha, será mostrado o novo estado da pilha na tela.\n\n3. Agora temos dois diretórios na pilha, se quisermos navegar até o `diretório1`, usamos novamente o comando `pushd` com o caminho (relativo ou absoluto):\n    ```bash\n    $ pushd /tmp/diretorio1\n    output: /tmp/diretorio1 /tmp/diretorio0 /tmp\n    ```\n\n4. Para retornar ao `diretorio0` basta usarmos o comando `popd` e remover o diretorio1 da pilha:\n    ```bash\n    $ popd\n    output: /tmp/diretorio0 /tmp\n    ```\n\n5. Para pular para um diretório específico da pilha sem remover nenhum, fazemos como abaixo:\n    ```bash\n    $ pushd /tmp/diretorio0\n    output: /tmp/diretorio0 /tmp\n\n    $ pushd /tmp/diretorio1\n    output: /tmp/diretorio1 /tmp/diretorio0 /tmp\n\n    $ pushd /tmp/diretorio2\n    /tmp/diretorio2 /tmp/diretorio1 /tmp/diretorio0 /tmp\n    ```\n\n6. Se queremos pular do diretório atual (`diretorio2`) para o `diretorio0` temos que andar duas posições na pilha. Então utilizamos o comando `pushd` conforme abaixo:\n    ```bash\n    $ pushd +2\n    output: /tmp/diretorio0 /tmp /tmp/diretorio2 /tmp/diretorio1\n    ```\n\nCaso você use o comando `pushd` sem o argumento `+2`, você será direcionado para o último diretório antes desse, ou seja, você pode usar o comando `pushd` para revezar entre dois diretórios _(como se fosse um `alt + tab` entre diretórios)_.\n\n> Note que, ao caminhar pelas posições na pilha, os diretórios que antecediam o diretório de destino foram para o final da pilha. Isso pode fazer que a navegação se torne confuso se a pilha está muito grande. Porém, sempre se pode limpar a pilha utilizando o comando `dirs -c`.\n\nCom o tempo e costume isso ajuda muito na navegação, principalmente quando se tem que ficar indo de um lado pro outro em diretórios de configuração.",
    "positive_reactions_count": 4,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--xgZ4S4cD--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/5odvac9yyq35pbmw6rwo.png",
    "tag_list": ["linux", "produtividade", "terminal", "bash"],
    "canonical_url": "https://dev.to/arielbarcellos/seja-mais-produtivo-com-linux-1-2c18",
    "user": {
      "name": "Ariel Barcellos",
      "username": "arielbarcellos",
      "twitter_username": "arielbarcellos",
      "github_username": "naijopkr",
      "website_url": "https://arielbarcellos.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--qldTNcmA--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--hD1vc0MP--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/100514/5c5c8dbe-5bce-4d1b-aba8-779dd273cdf7.jpg"
    }
  }
]
